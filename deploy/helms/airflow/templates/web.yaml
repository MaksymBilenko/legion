apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-web"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-web"
spec:
  selector:
    app: "{{ .Release.Name }}-airflow-web"
  ports:
    - name: web
      protocol: TCP
      port: 8080
      targetPort: web
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-web"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-web"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-airflow-web"
    spec:
      restartPolicy: Always
      containers:
      - name: web
        image: "{{ .Values.image }}"
        env:
        - name: POSTGRES_HOST
          value: "{{ .Release.Name }}-postgres"
        - name: REDIS_HOST
          value: "{{ .Release.Name }}-redis"
        - name: AIRFLOW_HOME
          value: "/home/airflow"
        volumeMounts:
        - name: airflow-config
          mountPath: /home/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: dag-volume
          mountPath: /home/airflow/dags
        ports:
        - name: web
          containerPort: 8080
        args: ["airflow", "webserver"]
      volumes:
      - name: airflow-config
        secret:
          secretName: "{{ .Release.Name }}-config"
          items:
          - key: airflow.cfg
            path: airflow.cfg
      - name: dag-volume
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-dag-pvc"