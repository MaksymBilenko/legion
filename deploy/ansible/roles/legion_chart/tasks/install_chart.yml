---

- name: "Create {{ tenant }} namespace"
  shell: "kubectl create namespace {{ tenant }}"

- name: Copy TLS secret
  shell: "kubectl get secret {{ source_secret_name }} -o json --namespace default | jq '.metadata.namespace = \"{{ tenant }}\"' | jq '.metadata.name = \"{{ root_domain }}-tls\"' | kubectl create -f  -"

- name: Update dependencies of legion chart
  shell: helm dependency update
  args:
    chdir: ../helms/legion

- name: Generate jupyter hub proxy secret
  command: python -c 'import os, binascii; print(binascii.b2a_hex(os.urandom(60))[:32])'
  register: jupyter_hub_proxy_secret_output

- name: Create legion configuration (values) file
  template:
    src: legion-values.yaml.j2
    dest: ~/legion-values.yaml
    mode: 0644
  vars:
    jupyter_hub_proxy_secret: "{{ jupyter_hub_proxy_secret_output.stdout }}"
    git_secret_name: legion-git-deploy

- name: Pre run with dumping
  shell: "helm install legion --name legion-{{ tenant }} --namespace {{ tenant }} --debug --dry-run -f  ~/legion-values.yaml"
  register: helm_legion_install_output
  args:
    chdir: ../helms

- name: Save pre run result
  copy:
    content: "{{ helm_legion_install_output.stdout }}"
    dest: ./helm.legion_{{ tenant }}.debug

- name: Install legion chart
  shell: "helm install legion --name legion-{{ tenant }} --namespace {{ tenant }} --wait --timeout 600 -f  ~/legion-values.yaml"
  args:
    chdir: ../helms

- name: Run HELM status checker
  shell: "payloads/examine_helm_deployed legion-{{ tenant }}"

- name: Dump current HELM status
  shell: "helm status legion-{{ tenant }}"
  register: helm_legion_status_output

- name: Save HELM status localy
  copy:
    content: "{{ helm_legion_status_output.stdout }}"
    dest: "./helm.legion_{{ tenant }}.status"
