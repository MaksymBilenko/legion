#!/usr/bin/env python
#
#   Copyright 2017 EPAM Systems
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
"""
Tool for checking that helm chart fully deployed
"""
from __future__ import print_function
import argparse
import re
import subprocess


def get_raw_list_of_charts():
    """
    Request raw list of charts

    :raises: Exception
    :return: str -- stdout
    """
    data = subprocess.check_output(['helm', 'ls'])
    if isinstance(data, bytes):
        data = data.decode('utf-8')

    return data


def remove_chart(deployment):
    """
    Remove chart by deployment name

    :param deployment: name of deployment
    :type deployment: str
    :raises: Exception
    :return: str -- stdout
    """
    print('Removing chart {}'.format(deployment))
    data = subprocess.check_output(['helm', 'delete', '--purge', deployment])
    if isinstance(data, bytes):
        data = data.decode('utf-8')

    return data


def get_tables_from_helm_list(text):
    """
    Parse list table

    :param text: stdout of helm list
    :type text: str
    :raises: Exception
    :return: list[dict(str, str)] -- Table: List[{Column: Value}]
    """
    lines = text.splitlines()

    header = [(item.strip(), len(item)) for item in re.findall('\w+[\s{2,}\t\n]+', lines[0])]
    header = [(name, sum(x[1] for x in header[0:idx]), length) for idx, (name, length) in enumerate(header)]

    table = [{column: line[start:start+end].strip()
              for index, (column, start, end) in enumerate(header)}
             for line in lines[1:]]

    return table


def work(target_chart):
    """
    Remove deployed charts with specific chart name

    :param target_chart: chart name
    :type target_chart: str
    :return: None
    """
    list_of_deployment = get_tables_from_helm_list(get_raw_list_of_charts())

    for deployment in list_of_deployment:
        chart = deployment.get('CHART')
        name = deployment.get('NAME')
        if chart and name and chart.startswith(target_chart + '-'):
            remove_chart(name)

    if not list_of_deployment:
        print('Cannot find any deployment')


if __name__ == '__main__':
    parser = argparse.ArgumentParser('HELM chart removal')
    parser.add_argument('chart', type=str, help='name of chart')

    args = parser.parse_args()

    work(args.chart)
